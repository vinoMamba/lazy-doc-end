// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: project.sql

package storage

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :execresult
INSERT INTO project (project_name, project_description, is_public, is_deleted, created_by) VALUES (?, ?, ?, ?, ?)
`

type CreateProjectParams struct {
	ProjectName        string
	ProjectDescription sql.NullString
	IsPublic           sql.NullBool
	IsDeleted          sql.NullBool
	CreatedBy          int64
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProject,
		arg.ProjectName,
		arg.ProjectDescription,
		arg.IsPublic,
		arg.IsDeleted,
		arg.CreatedBy,
	)
}

const getProjectList = `-- name: GetProjectList :many
SELECT id, project_name, project_description, is_public, is_deleted, created_by, created_at, updated_at FROM project WHERE is_deleted = false ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type GetProjectListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProjectList(ctx context.Context, arg GetProjectListParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.ProjectDescription,
			&i.IsPublic,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
